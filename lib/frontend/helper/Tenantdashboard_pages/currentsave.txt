import 'dart:async';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:rehnaa/backend/models/rentpaymentmodel.dart';
import 'package:responsive_framework/responsive_scaled_box.dart';
import 'package:smooth_page_indicator/smooth_page_indicator.dart';

import '../../Screens/rentpayment_info.dart';
import '../Landlorddashboard_pages/skeleton.dart';

class TenantRentHistoryPage extends StatefulWidget {
  final String uid; // UID of the landlord
  final String callerType;

  const TenantRentHistoryPage(
      {Key? key, required this.uid, required this.callerType})
      : super(key: key);

  @override
  _TenantRentHistoryPageState createState() => _TenantRentHistoryPageState();
}

class _TenantRentHistoryPageState extends State<TenantRentHistoryPage>
    with AutomaticKeepAliveClientMixin<TenantRentHistoryPage> {
  List<RentPayment> _rentPayments = [];
  String firstName = '';
  String lastName = '';
  bool shouldDisplay = false;
  String searchText = ''; // Variable to store the search query
  String invoiceNumber = '';
  String pdfUrl = '';
  Timer? _timer;
  bool isMinus = false;
  var rentPaymentLength = 0;
  List<dynamic> rentPaymentRefs = [];
  Set<int> loadedIndices = {};

  @override
  bool get wantKeepAlive => true;

  @override
  void initState() {
    _tenantRentPayments(); // Call method to load rent payments when the state is initialized
    // _startPeriodicFetch(); // Start periodic fetching of new data
    _pageController.addListener(() {
      setState(() {});
    });
    super.initState();

    Future.delayed(const Duration(seconds: 2), () {
      setState(() {});
    });
  }

  @override
  void dispose() {
    // _stopPeriodicFetch(); // Stop periodic fetching when the widget is disposed
    super.dispose();
  }

  // // Periodically fetch new data every 5 seconds
  // void _startPeriodicFetch() {
  //   _timer = Timer.periodic(const Duration(seconds: 5), (_) {
  //     _tenantRentPayments();
  //   });
  // }

  // // Stop periodic fetching
  // void _stopPeriodicFetch() {
  //   _timer?.cancel();
  // }

  Future<void> _tenantRentPayments() async {
    // Fetch landlord data from Firestore
    DocumentSnapshot<Map<String, dynamic>> landlordSnapshot =
        await FirebaseFirestore.instance
            .collection(widget.callerType)
            .doc(widget.uid)
            .get();

    Map<String, dynamic>? data = landlordSnapshot.data();
    rentPaymentRefs = data!['rentpaymentRef'] ?? [];
    if (widget.callerType == "Tenants") {
      firstName = data['firstName'];
      lastName = data['lastName'];
    } else {
      // firstName = data['tenantname'] ?? 'Old doc no tenantname';
      lastName = '';
    }

    if (rentPaymentRefs.isEmpty) {
      setState(() {
        shouldDisplay = true;
      });
      // shouldDisplay = true;
    }

    rentPaymentLength = rentPaymentRefs.length;
    rentPaymentRefs = rentPaymentRefs.reversed.toList();

    await loadRentPayments(rentPaymentRefs, 0);
  }

  Future<List<RentPayment>> loadRentPayments(
      List<dynamic> rentPaymentRefs, int startIndex) async {
    List<RentPayment> newRentPayments = []; // Store the new rent payments

    print('Start Index: $startIndex');

    List<dynamic> futures = [];

    for (var i = startIndex; i < (startIndex) + _pageSize; i++) {
      if (i < rentPaymentRefs.length) {
        DocumentSnapshot<Map<String, dynamic>> rentPaymentSnapshot =
            await rentPaymentRefs[i].get();

        Map<String, dynamic>? data = rentPaymentSnapshot.data();

        if (data != null) {
          print('the data is $data \n\n\n');
          RentPayment rentPayment = await RentPayment.fromJson(data);

          if (rentPayment.isMinus != null) {
            isMinus = rentPayment.isMinus!;
          } else {
            rentPayment.isMinus =
                data['landlordRef'] != null || data['dealerRef'] != null;
            print(
                'Fetching PDF URL for invoiceNumber: ${rentPayment.invoiceNumber}');
            rentPayment.pdfUrl = await FirebaseFirestore.instance
                .collection('invoices')
                .doc(rentPayment.invoiceNumber)
                .get()
                .then((value) => value.data()?['url']);
          }

          newRentPayments.add(rentPayment); // Add the new rent payment
          print('Rent Payment Added: $rentPayment');
        }
      }
    }

    print('New Rent Payments Length: ${newRentPayments.length}');

    // Check for changes in rent payments
    if (!listEquals(_rentPayments, newRentPayments)) {
      if (mounted) {
        // setState(() {
        _rentPayments = newRentPayments; // Update the rent payments list
        shouldDisplay = true;

        return _rentPayments;

        // });
      }
    }
    return _rentPayments;
  }

  final PageController _pageController = PageController(initialPage: 0);
  final int _pageSize = 2; // Number of rent payments to show per page
  String? latestMonth;
  String? previousMonth;

  Widget _buildRentPaymentCard(RentPayment rentPayment) {
    print('called with amount ${rentPayment.amount}');
    final Size size = MediaQuery.of(context).size;
    final double whiteBoxHeight = size.height * 0.17;
    final double whiteBoxWidth = size.width * 0.75;

    String iconAsset = 'assets/mainlogo.png'; // Default icon

    // Update the iconAsset based on paymentType
    switch (rentPayment.paymentType) {
      case "cash":
        iconAsset = 'assets/cashicon.png';
        break;
      case "banktransfer":
        iconAsset = 'assets/banktransfer.png';
        break;
      case "easypaisa":
        iconAsset = 'assets/easypaisa.png';
        break;
      case "jazzcash":
        iconAsset = 'assets/jazzcash.png';
        break;
      default:
        iconAsset = 'assets/mainlogo.png';
    }

    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => RentPaymentInfoPage(
              rentPayment: rentPayment,
              firstName: widget.callerType == 'Tenants'
                  ? rentPayment.tenantname == 'Old document'
                      ? firstName
                      : rentPayment.tenantname!
                  : rentPayment.tenantname!,
              lastName: lastName,
              receiptUrl: rentPayment.pdfUrl ?? 'No pdf',
            ),
          ),
        );
      },
      child: Padding(
        padding: EdgeInsets.symmetric(
          horizontal: size.width * 0.02,
          vertical: size.height * 0.015,
        ),
        child: Card(
          elevation: 4.0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(size.width * 0.04),
          ),
          child: Container(
            height: whiteBoxHeight,
            width: whiteBoxWidth,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(size.width * 0.04),
              color: Colors.white,
            ),
            child: Padding(
              padding: EdgeInsets.all(size.width * 0.04),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Image.asset(
                        iconAsset,
                        width: size.width * 0.2,
                      ),
                      SizedBox(width: size.width * 0.04),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Text(
                              widget.callerType == 'Tenants'
                                  ? rentPayment.tenantname == 'Old document'
                                      ? '$firstName $lastName'
                                      : rentPayment.tenantname!
                                  : rentPayment.tenantname!,
                              style: GoogleFonts.montserrat(
                                fontSize: size.width * 0.04,
                                fontWeight: FontWeight.bold,
                                color: const Color(0xff33907c),
                              ),
                            ),
                            SizedBox(height: size.height * 0.01),
                            Text(
                              rentPayment.property?.location ?? '',
                              style: GoogleFonts.montserrat(
                                fontSize: size.width * 0.03,
                                color: const Color(0xff33907c),
                              ),
                            ),
                          ],
                        ),
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.end,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Text(
                                //display in format day/month/year
                                '${rentPayment.date.day}/${rentPayment.date.month}/${rentPayment.date.year}',
                                style: GoogleFonts.montserrat(
                                  fontSize: size.width * 0.03,
                                  color: const Color(0xff33907c),
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: size.height * 0.05),
                          //add a padding so that the next row is pushed further down
                          Padding(
                            padding:
                                EdgeInsets.only(bottom: size.height * 0.02),
                          ),
                          Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Text(
                                rentPayment.isMinus! ? '-' : '+',
                                style: GoogleFonts.montserrat(
                                  fontSize: size.width * 0.04,
                                  fontWeight: FontWeight.bold,
                                  color: const Color(0xff33907c),
                                ),
                              ),
                              Text(
                                formatNumber(rentPayment.amount),
                                style: GoogleFonts.montserrat(
                                  fontSize: size.width * 0.035,
                                  fontWeight: FontWeight.bold,
                                  color: const Color(0xff33907c),
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Future<List<Widget>> _buildRentPaymentCards(int startIndex) async {
    print('called with start index $startIndex');

    // if (startIndex != 0) {
    await loadRentPayments(rentPaymentRefs, startIndex);
    // }

    final List<RentPayment> filteredRentPayments = _filteredRentPayments();

    // if (startIndex >= filteredRentPayments.length) {
    //   // Start index is beyond the available rent payments, return an empty list
    //   return [];
    // }

    print(
        'filtered rent payments is  to display length is ${filteredRentPayments.length}');

    final List<RentPayment> rentPaymentsToDisplay = filteredRentPayments;

    print('rentpayments to display length is ${rentPaymentsToDisplay.length}');

    return rentPaymentsToDisplay
        .map((rentPayment) => _buildRentPaymentCard(rentPayment))
        .toList();
  }

  List<RentPayment> _filteredRentPayments() {
    // Filter rent payments based on search query

    return _rentPayments
        .where((rentPayment) => '${firstName} ${lastName}'
            .toLowerCase()
            .contains(searchText.toLowerCase()))
        .toList();
  }

  // Widget _rentPaymentSelectorWidget(BuildContext context, bool shouldDisplay2) {
  //   final Size size = MediaQuery.of(context).size;
  //   int currentPage =
  //       _pageController.hasClients ? _pageController.page?.round() ?? 0 : 0;
  //   int pageCount = (_filteredRentPayments().length / _pageSize).ceil() + 1;

  //   if (!shouldDisplay2) {
  //     return const TenantRentSkeleton();
  //   } else {
  //     return Container();
  //   }
  // }

  @override
  Widget build(BuildContext context) {
    super.build(context); // Ensure the mixin's build method is called

    Size size = MediaQuery.of(context).size;
    int pageCount = (rentPaymentLength / _pageSize).ceil();
    // print('length count is ${_filteredRentPayments().length}');

    return ResponsiveScaledBox(
      width: size.width,
      child: Scaffold(
        body: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  'Payment History',
                  style: GoogleFonts.montserrat(
                    fontWeight: FontWeight.bold,
                    fontSize: 24.0,
                    color: const Color(0xff33907c),
                  ),
                ),
                SizedBox(width: size.width * 0.04),
                // _buildRefreshButton(),
              ],
            ),
            SizedBox(height: size.height * 0.03),
            Text(
              'All ${widget.callerType} Rentals',
              style: GoogleFonts.montserrat(
                fontWeight: FontWeight.bold,
                // fontStyle: FontStyle.italic,
                fontSize: size.width * 0.045,
                color: const Color(0xff33907c),
              ),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: size.height * 0.01),
            Center(
              child: Column(
                children: [
                  SizedBox(height: size.height * 0.02),
                  Container(
                    width: 300,
                    height: 50,
                    alignment: Alignment.center,
                    decoration: BoxDecoration(
                      border: Border.all(
                        width: 1,
                        color: const Color(0xff33907c),
                      ),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: TextFormField(
                      decoration: const InputDecoration(
                        labelText: "Search",
                        labelStyle: TextStyle(color: Colors.green),
                        suffixIcon: Icon(Icons.search, color: Colors.green),
                        border: InputBorder.none,
                        contentPadding: EdgeInsets.all(10),
                      ),
                      onChanged: (value) {
                        setState(() {
                          searchText = value; // Update the search query
                        });
                      },
                    ),
                  ),
                  SizedBox(height: size.height * 0.02),
                  // _buildLatestMonthWidget(),
                ],
              ),
            ),
            // _rentPaymentSelectorWidget(context, shouldDisplay),
            StatefulBuilder(
              builder: (BuildContext context, setState) {
                return Expanded(
                  // Wrap the Column with Expanded
                  child: SingleChildScrollView(
                    scrollDirection: Axis.vertical,
                    child: Column(
                      mainAxisSize: MainAxisSize.max,
                      children: [
                        Container(
                          height:
                              size.height * 0.5, // Replace with desired height
                          child: PageView.builder(
                            itemCount: pageCount,
                            controller: _pageController,
                            itemBuilder: (context, index) {
                              // if (!loadedIndices.contains(index * _pageSize)) {
                              print('loading the cards');
                              loadedIndices.add(index * _pageSize);
                              return FutureBuilder<List<Widget>>(
                                future:
                                    _buildRentPaymentCards(index * _pageSize),
                                builder: (context, snapshot) {
                                  if (snapshot.connectionState ==
                                      ConnectionState.done) {
                                    // setState(() {
                                    //   shouldDisplay = true;
                                    // });
                                    print('returning the cards');
                                    print(
                                        'Data length: ${snapshot.data!.length}');
                                    print('Snapshot data: ${snapshot.data}');
                                    // setState() {}

                                    return ListView.builder(
                                      itemCount: snapshot.data!.length,
                                      itemBuilder: (context, innerIndex) {
                                        print(
                                            'Building card at index $innerIndex');
                                        print(
                                            'Card data: ${snapshot.data![innerIndex]}');
                                        return snapshot.data![innerIndex];
                                      },
                                    );
                                  } else if (snapshot.hasError) {
                                    print('returning error text');

                                    // Handle error case
                                    return Text('Error: ${snapshot.error}');
                                  } else {
                                    print('returning skeleton');
                                    // Show loading or placeholder widget
                                    return const TenantRentSkeleton();
                                  }
                                },
                              );
                              // } else {
                              //   print(
                              //       'returning empty container as loadedindices is $loadedIndices');
                              //   print(
                              //       'and startindex/page index is ${index * _pageSize}');
                              //   return Container();
                              // }
                            },
                          ),
                        ),
                        SizedBox(height: size.height * 0.01),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            SmoothPageIndicator(
                              controller: _pageController,
                              count: rentPaymentRefs.length,
                              effect: const WormEffect(
                                dotColor: Colors.grey,
                                activeDotColor: Color(0xff33907c),
                                dotHeight: 10.0,
                                dotWidth: 10.0,
                                spacing: 8.0,
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: size.height * 0.03),
                      ],
                    ),
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}

class TenantRentSkeleton extends StatelessWidget {
  const TenantRentSkeleton({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final Size size = MediaQuery.of(context).size;

    return Column(
      children: <Widget>[
        SizedBox(height: size.height * 0.03),
        Container(
          padding: const EdgeInsets.symmetric(vertical: 16.0),
          alignment: Alignment.center,
          child: Skeleton(
            width: size.width * 0.5,
            height: 30,
          ),
        ),
        SizedBox(height: size.height * 0.02),
        ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: 1,
          itemBuilder: (context, index) {
            return Padding(
              padding: const EdgeInsets.symmetric(vertical: 8.0),
              child: Card(
                elevation: 4.0,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20.0),
                ),
                child: Container(
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(20.0),
                    color: Colors.white,
                  ),
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Skeleton(
                        width: size.width * 0.4,
                        height: 20.0,
                      ),
                      const SizedBox(height: 8.0),
                      Skeleton(
                        width: size.width * 0.7,
                        height: 16.0,
                      ),
                      const SizedBox(height: 16.0),
                      Row(
                        children: [
                          Skeleton(
                            width: size.width * 0.12,
                            height: 20.0,
                          ),
                          SizedBox(width: size.width * 0.04),
                          Skeleton(
                            width: size.width * 0.3,
                            height: 20.0,
                          ),
                          SizedBox(width: size.width * 0.04),
                          Skeleton(
                            width: size.width * 0.2,
                            height: 20.0,
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            );
          },
        ),
        SizedBox(height: size.height * 0.03),
      ],
    );
  }
}

String formatNumber(double? value) {
  if (value != null) {
    return value.toStringAsFixed(value.truncateToDouble() == value ? 0 : 2);
  }
  return '';
}
